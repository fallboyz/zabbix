zabbix_export:
  version: '6.0'
  date: '2023-11-20T07:40:41Z'
  groups:
    - uuid: c2c162144c2d4c5491c8801193af4945
      name: Templates/Cloud
  templates:
    - uuid: 79e3ef08b9604c9aa20bb2dc213d73a8
      template: 'AWS ELB by HTTP'
      name: 'AWS ELB by HTTP'
      description: |
        이 템플릿은 자빅스의 AWS 공식 템플릿을 참고하여 ELB를 모니터링 하기 위하여 만들었습니다.
        https://www.zabbix.com/integrations/aws
        
        모니터링 데이터는 아래 페이지를 참고하였습니다.
        https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-cloudwatch-metrics.html
        
        매크로 설명
        {$AWS.ACCESS.KEY.ID} : 억세스 키
        {$AWS.AUTH_TYPE} : 역활 기반이면 robe_base, 인증키 기반이면 access_key 입력
        {$AWS.ELB.INSTANCE.ID} : 로드발란서의 ARN값에서 app/my-alb/ed123456a12f01d0 부분에 해당하는 값
        {$AWS.REGION} : 로드발란서가 있는 AWS 지역 코드
        {$AWS.SECRET.ACCESS.KEY} : 시크릿 키
        
        주의: 적절한 IAM 권한이 있어야 합니다. 아래는 최소 권한 정책이며, 바뀔 수 있습니다.
        {
            "Version": "2012-10-17",
            "Statement": [
                {
                    "Effect": "Allow",
                    "Action": [
                        "cloudwatch:GetMetricStatistics",
                        "cloudwatch:ListMetrics",
                        "cloudwatch:GetMetricData"
                    ],
                    "Resource": "*"
                }
            ]
        }
        
        Created by 2023-11-20
        Template by coulson.p@mibank.me
      groups:
        - name: Templates/Cloud
      items:
        - uuid: ebcf0f48fe96472c9ecdca0ab5e87b64
          name: 'AWS ELB: ActiveConnectionCount'
          type: DEPENDENT
          key: aws.elb.activeconnectioncount
          delay: '0'
          history: 7d
          description: |
            The total number of concurrent TCP connections active from clients to the load balancer and from the load balancer to targets.
            
            https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-cloudwatch-metrics.html
          preprocessing:
            - type: JSONPATH
              parameters:
                - '$.[?(@.Label == "ActiveConnectionCount")].Values.first().first()'
          master_item:
            key: aws.elb.get_metrics
          tags:
            - tag: Application
              value: 'AWS ELB'
          triggers:
            - uuid: 710c069d83e142b19039db73e2737979
              expression: 'avg(/AWS ELB by HTTP/aws.elb.activeconnectioncount, 5m) > 1000'
              name: 'Too many Active Connections on  {HOST.NAME}'
              priority: INFO
        - uuid: ebcf0f48fe96472c9ecdca0ab5e87b65
          name: 'AWS ELB: ClientTLSNegotiationErrorCount'
          type: DEPENDENT
          key: aws.elb.clienttlsnegotiationerrorcount
          delay: '0'
          history: 7d
          description: |
            The number of TLS connections initiated by the client that did not establish a session with the load balancer due to a TLS error. Possible causes include a mismatch of ciphers or protocols or the client failing to verify the server certificate and closing the connection..
            
            https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-cloudwatch-metrics.html
          preprocessing:
            - type: JSONPATH
              parameters:
                - '$.[?(@.Label == "ClientTLSNegotiationErrorCount")].Values.first().first()'
          master_item:
            key: aws.elb.get_metrics
          tags:
            - tag: Application
              value: 'AWS ELB'
        - uuid: ebcf0f48fe96472c9ecdca0ab5e87b66
          name: 'AWS ELB: ConsumedLCUs'
          type: DEPENDENT
          key: aws.elb.consumedlcus
          delay: '0'
          history: 7d
          value_type: FLOAT
          description: |
            The number of load balancer capacity units (LCU) used by your load balancer. You pay for the number of LCUs that you use per hour.
            
            https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-cloudwatch-metrics.html
          preprocessing:
            - type: JSONPATH
              parameters:
                - '$.[?(@.Label == "ConsumedLCUs")].Values.first().first()'
          master_item:
            key: aws.elb.get_metrics
          tags:
            - tag: Application
              value: 'AWS ELB'
        - uuid: ebcf0f48fe96472c9ecdca0ab5e87b67
          name: 'AWS ELB: DesyncMitigationMode_NonCompliant_Request_Count'
          type: DEPENDENT
          key: aws.elb.desyncmitigationmode_noncompliant_request_count
          delay: '0'
          history: 7d
          description: |
            The number of requests that do not comply with RFC 7230.
            
            https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-cloudwatch-metrics.html
          preprocessing:
            - type: JSONPATH
              parameters:
                - '$.[?(@.Label == "DesyncMitigationMode_NonCompliant_Request_Count")].Values.first().first()'
          master_item:
            key: aws.elb.get_metrics
          tags:
            - tag: Application
              value: 'AWS ELB'
        - uuid: ebcf0f48fe96472c9ecdca0ab5e87b68
          name: 'AWS ELB: DroppedInvalidHeaderRequestCount'
          type: DEPENDENT
          key: aws.elb.droppedinvalidheaderrequestcount
          delay: '0'
          history: 7d
          description: |
            The number of requests where the load balancer removed HTTP headers with header fields that are not valid before routing the request. The load balancer removes these headers only if the routing.http.drop_invalid_header_fields.enabled attribute is set to true.
            
            https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-cloudwatch-metrics.html
          preprocessing:
            - type: JSONPATH
              parameters:
                - '$.[?(@.Label == "DroppedInvalidHeaderRequestCount")].Values.first().first()'
          master_item:
            key: aws.elb.get_metrics
          tags:
            - tag: Application
              value: 'AWS ELB'
        - uuid: ebcf0f48fe96472c9ecdca0ab5e87b69
          name: 'AWS ELB: ForwardedInvalidHeaderRequestCount'
          type: DEPENDENT
          key: aws.elb.forwardedinvalidheaderrequestcount
          delay: '0'
          history: 7d
          description: |
            The number of requests routed by the load balancer that had HTTP headers with header fields that are not valid. The load balancer forwards requests with these headers only if the routing.http.drop_invalid_header_fields.enabled attribute is set to false.
            
            https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-cloudwatch-metrics.html
          preprocessing:
            - type: JSONPATH
              parameters:
                - '$.[?(@.Label == "ForwardedInvalidHeaderRequestCount")].Values.first().first()'
          master_item:
            key: aws.elb.get_metrics
          tags:
            - tag: Application
              value: 'AWS ELB'
        - uuid: 0f8ce27c0fbc4a13b71cc30849832f55
          name: 'AWS ELB: Get metrics data'
          type: SCRIPT
          key: aws.elb.get_metrics
          delay: 60s
          history: '0'
          trends: '0'
          value_type: TEXT
          params: |
            var AWS = {
                params: {},
                request_period: 60,
            
                getField: function (data, path) {
                    var steps = path.split('.');
                    for (var i = 0; i < steps.length; i++) {
                        var step = steps[i];
                        if (typeof data !== 'object' || typeof data[step] === 'undefined') {
                            throw 'Required field was not found: ' + path;
                        }
            
                        data = data[step];
                    }
            
                    return data;
                },
            
                setParams: function (params) {
                    switch (AWS.getField(params, 'auth_type')) {
                        case 'role_base':
                            AWS.params['auth_type'] = 'role_base';
                            var request = new HttpRequest(),
                                IamRoleName = request.get('http://169.254.169.254/latest/meta-data/iam/security-credentials');
            
                            if (request.getStatus() !== 200 || IamRoleName === null || IamRoleName === '') {
                                throw 'Error getting security credentials from instance metadata. Role not found.';
                            }
            
                            credentials = request.get('http://169.254.169.254/latest/meta-data/iam/security-credentials/' + encodeURI(IamRoleName));
            
                            if (request.getStatus() !== 200 || credentials === null || credentials === '') {
                                throw 'Error getting security credentials from instance metadata.';
                            }
            
                            try {
                                credentials = JSON.parse(credentials);
                            }
                            catch (error) {
                                throw 'Failed to parse response received from instance metadata. Check debug log for more information.';
                            }
            
                            ['AccessKeyId', 'SecretAccessKey', 'Token'].forEach(function (field) {
                                if (typeof credentials !== 'object' || typeof credentials[field] === 'undefined' || credentials[field] === '') {
                                    throw 'Required credentials is not set: "' + field + '".';
                                };
                                AWS.params[field] = credentials[field];
                            });
                            break;
                        case 'access_key':
                        default:
                            AWS.params['auth_type'] = 'access_key';
                            ['AccessKeyId', 'SecretAccessKey'].forEach(function (field) {
                                if (typeof params !== 'object' || typeof params[field] === 'undefined' || params[field] === '') {
                                    throw 'Required param is not set: "' + field + '".';
                                }
                                AWS.params[field] = params[field];
                            });
                    }
                    ['region', 'elb_instance_id'].forEach(function (field) {
                        if (typeof params !== 'object' || typeof params[field] === 'undefined' || params[field] === '') {
                            throw 'Required param is not set: "' + field + '".';
                        }
                        AWS.params[field] = params[field];
                    });
                },
            
                sign: function (key, message) {
                    var hex = hmac('sha256', key, message);
            
                    if ((hex.length % 2) === 1) {
                        throw 'Invalid length of a hex string!';
                    }
            
                    var result = new Int8Array(hex.length / 2);
                    for (var i = 0, b = 0; i < hex.length; i += 2, b++) {
                        result[b] = parseInt(hex.substring(i, i + 2), 16);
                    }
            
                    return result;
                },
            
                renderMetricQuery: function (period, elb_instance_id) {
                    var metrics_list = [
                      'ActiveConnectionCount:Count',
                      'ClientTLSNegotiationErrorCount:Count',
                      'ConsumedLCUs:Count',
                      'DesyncMitigationMode_NonCompliant_Request_Count:Count',
                      'DroppedInvalidHeaderRequestCount:Count',
                      'ForwardedInvalidHeaderRequestCount:Count',
                      'GrpcRequestCount:Count',
                      'HTTP_Fixed_Response_Count:Count',
                      'HTTP_Redirect_Count:Count',
                      'HTTP_Redirect_Url_Limit_Exceeded_Count:Count',
                      'HTTPCode_ELB_3XX_Count:Count',
                      'HTTPCode_ELB_4XX_Count:Count',
                      'HTTPCode_ELB_5XX_Count:Count',
                      'HTTPCode_ELB_500_Count:Count',
                      'HTTPCode_ELB_502_Count:Count',
                      'HTTPCode_ELB_503_Count:Count',
                      'HTTPCode_ELB_504_Count:Count',
                      'IPv6ProcessedBytes:Bytes',
                      'IPv6RequestCount:Count',          
                      'NewConnectionCount:Count',
                      'NonStickyRequestCount:Count',
                      'ProcessedBytes:Bytes',
                      'RejectedConnectionCount:Count',
                      'RequestCount:Count',
                      'RuleEvaluations:Count'
                    ];
            
                    var metric_payload = [];
                    metrics_list.forEach(function (metric) {
                        var parts = metric.split(':', 2);
                        var name = parts[0].replace(/[^a-zA-Z0-9_]/g, '');
                        metric_payload.push({
                            'Id': name.charAt(0).toLowerCase() + name.slice(1),
                            'MetricStat': {
                                'Metric': {
                                    'MetricName': parts[0],
                                    'Namespace': 'AWS/ApplicationELB',
                                    'Dimensions': [
                                        {
                                            'Name': 'LoadBalancer',
                                            'Value': elb_instance_id
                                        }
                                    ]
                                },
                                'Period': period,
                                'Stat': 'Sum',
                                'Unit': parts[1]
                            }
                        });
                    });
            
                    return metric_payload;
            
                },
                prepareParams: function (params) {
                    var result = [];
            
                    Object.keys(params).sort().forEach(function (key) {
                        if (typeof params[key] !== 'object') {
                            result.push(key + '=' + encodeURIComponent(params[key]));
                        }
                        else {
                            result.push(prepareObject(key, params[key]));
                        }
                    });
            
                    return result.join('&');
                },
            
                request: function (method, region, service, request_data) {
                    if (typeof request_data === 'undefined' || request_data === null) {
                        request_data = '';
                    }
                    else {
                        request_data = JSON.stringify(request_data)
                    }
            
                    var amzdate = (new Date()).toISOString().replace(/\.\d+Z/, 'Z').replace(/[-:]/g, ''),
                        date = amzdate.replace(/T\d+Z/, ''),
                        host = service + '.' + region + '.amazonaws.com',
                        canonical_uri = '/';
            
                        if (AWS.params.auth_type === 'role_base'){
                            var canonical_headers = 'content-encoding:amz-1.0\n' + 'host:' + host + '\n' + 'x-amz-date:' + amzdate + '\n' + 'x-amz-security-token:' + AWS.params.Token + '\n',
                                signed_headers = 'content-encoding;host;x-amz-date;x-amz-security-token';
                        } else {
                            var canonical_headers = 'content-encoding:amz-1.0\n' + 'host:' + host + '\n' + 'x-amz-date:' + amzdate + '\n',
                                signed_headers = 'content-encoding;host;x-amz-date';
                        }
                
                        var canonical_request = method + '\n' + canonical_uri + '\n' + '\n' + canonical_headers + '\n' + signed_headers + '\n' + sha256(request_data),
                            credential_scope = date + '/' + region + '/' + service + '/' + 'aws4_request',
                        request_string = 'AWS4-HMAC-SHA256' + '\n' + amzdate + '\n' + credential_scope + '\n' + sha256(canonical_request),
                        key = AWS.sign('AWS4' + AWS.params.SecretAccessKey, date);
            
                    key = AWS.sign(key, region);
                    key = AWS.sign(key, service);
                    key = AWS.sign(key, 'aws4_request');
            
                    var request = new HttpRequest(),
                        url = 'https://' + host + canonical_uri;
            
                    if (typeof AWS.params.proxy !== 'undefined' && AWS.params.proxy !== '') {
                        request.setProxy(AWS.params.proxy);
                    }
                    request.addHeader('x-amz-date: ' + amzdate);
                    request.addHeader('X-Amz-Target: GraniteServiceVersion20100801.GetMetricData')
                    request.addHeader('Accept: application/json');
                    request.addHeader('Content-Type: application/json');
                    request.addHeader('Content-Encoding: amz-1.0');
                    request.addHeader('Authorization: ' + 'AWS4-HMAC-SHA256 Credential=' + AWS.params.AccessKeyId + '/' + credential_scope + ', ' + 'SignedHeaders=' + signed_headers + ', ' + 'Signature=' + hmac('sha256', key, request_string));
                    if (AWS.params.auth_type === 'role_base')
                        request.addHeader('X-Amz-Security-Token: ' + AWS.params.Token);
                    
                    Zabbix.log(4, '[ AWS ELB ] Sending request: ' + url);
            
                    response = request.post(url, request_data);
                    Zabbix.log(4, '[ AWS ELB ] Received response with status code ' + request.getStatus() + ': ' + response);
            
                    if (request.getStatus() !== 200) {
                        throw 'Request failed with status code ' + request.getStatus() + ': ' + response;
                    }
            
                    if (response !== null) {
                        try {
                            response = JSON.parse(response);
                        }
                        catch (error) {
                            throw 'Failed to parse response received from AWS CloudWatch API. Check debug log for more information.';
                        }
                    }
            
                    return response;
                },
            
                getMetricsData: function () {
                    var payload={},
                        end_time = Math.floor((new Date().getTime())/1000),
                        start_time = end_time - AWS.request_period;
            
                    payload['StartTime'] = start_time;
                    payload['EndTime'] = end_time;
                    payload['ScanBy'] = 'TimestampDescending';
                    payload['MetricDataQueries'] = AWS.renderMetricQuery(AWS.request_period, AWS.params.elb_instance_id);
                    result = AWS.request('POST', AWS.params.region, 'monitoring', payload);
                    if (typeof result !== 'object' || typeof result.MetricDataResults !== 'object') {
                        throw 'Cannot get metrics data from AWS CloudWatch API. Check debug log for more information.';
                    }
            
                    return result.MetricDataResults;
                }
            };
            
            try {
                AWS.setParams(JSON.parse(value));
            
                return JSON.stringify(AWS.getMetricsData());
            }
            catch (error) {
                error += (String(error).endsWith('.')) ? '' : '.';
                Zabbix.log(3, '[ AWS ELB ] ERROR: ' + error);
                
                return JSON.stringify({'error': error});
            }
          description: |
            이 아이템은 자빅스의 AWS 공식 템플릿을 참고하여 ELB를 모니터링 하기 위하여 만들었습니다.
            https://www.zabbix.com/integrations/aws
            
            모니터링 데이터는 아래 페이지를 참고하였습니다.
            https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-cloudwatch-metrics.html
            
            Template by coulson.p@mibank.me
          preprocessing:
            - type: CHECK_NOT_SUPPORTED
              parameters:
                - ''
          timeout: 15s
          parameters:
            - name: AccessKeyId
              value: '{$AWS.ACCESS.KEY.ID}'
            - name: auth_type
              value: '{$AWS.AUTH_TYPE}'
            - name: elb_instance_id
              value: '{$AWS.ELB.INSTANCE.ID}'
            - name: region
              value: '{$AWS.REGION}'
            - name: SecretAccessKey
              value: '{$AWS.SECRET.ACCESS.KEY}'
          tags:
            - tag: component
              value: raw
        - uuid: ebcf0f48fe96472c9ecdca0ab5e87b70
          name: 'AWS ELB: GrpcRequestCount'
          type: DEPENDENT
          key: aws.elb.grpcrequestcount
          delay: '0'
          history: 7d
          description: |
            The number of gRPC requests processed over IPv4 and IPv6.
            
            https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-cloudwatch-metrics.html
          preprocessing:
            - type: JSONPATH
              parameters:
                - '$.[?(@.Label == "GrpcRequestCount")].Values.first().first()'
          master_item:
            key: aws.elb.get_metrics
          tags:
            - tag: Application
              value: 'AWS ELB'
        - uuid: ebcf0f48fe96472c9ecdca0ab5e87b74
          name: 'AWS ELB: HTTPCode_ELB_3XX_Count'
          type: DEPENDENT
          key: aws.elb.httpcode_elb_3xx_count
          delay: '0'
          history: 7d
          description: |
            The number of HTTP 3XX redirection codes that originate from the load balancer. This count does not include response codes generated by targets.
            
            https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-cloudwatch-metrics.html
          preprocessing:
            - type: JSONPATH
              parameters:
                - '$.[?(@.Label == "HTTPCode_ELB_3XX_Count")].Values.first().first()'
          master_item:
            key: aws.elb.get_metrics
          tags:
            - tag: Application
              value: 'AWS ELB'
        - uuid: ebcf0f48fe96472c9ecdca0ab5e87b75
          name: 'AWS ELB: HTTPCode_ELB_4XX_Count'
          type: DEPENDENT
          key: aws.elb.httpcode_elb_4xx_count
          delay: '0'
          history: 7d
          description: |
            The number of HTTP 4XX client error codes that originate from the load balancer. This count does not include response codes generated by targets. Client errors are generated when requests are malformed or incomplete. These requests were not received by the target, other than in the case where the load balancer returns an HTTP 460 error code. This count does not include any response codes generated by the targets.
            
            https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-cloudwatch-metrics.html
          preprocessing:
            - type: JSONPATH
              parameters:
                - '$.[?(@.Label == "HTTPCode_ELB_4XX_Count")].Values.first().first()'
          master_item:
            key: aws.elb.get_metrics
          tags:
            - tag: Application
              value: 'AWS ELB'
          triggers:
            - uuid: 039156465ea54b63abbf57c91b5f7d68
              expression: 'sum(/AWS ELB by HTTP/aws.elb.httpcode_elb_4xx_count, 5m) > 50'
              name: 'High 4XX Error rate on {HOST.NAME}'
              priority: WARNING
        - uuid: ebcf0f48fe96472c9ecdca0ab5e87b76
          name: 'AWS ELB: HTTPCode_ELB_5XX_Count'
          type: DEPENDENT
          key: aws.elb.httpcode_elb_5xx_count
          delay: '0'
          history: 7d
          description: |
            The number of HTTP 5XX server error codes that originate from the load balancer. This count does not include any response codes generated by the targets.
            
            https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-cloudwatch-metrics.html
          preprocessing:
            - type: JSONPATH
              parameters:
                - '$.[?(@.Label == "HTTPCode_ELB_5XX_Count")].Values.first().first()'
          master_item:
            key: aws.elb.get_metrics
          tags:
            - tag: Application
              value: 'AWS ELB'
          triggers:
            - uuid: 4bba5544494f4b07a86fe5c293f89a0f
              expression: 'sum(/AWS ELB by HTTP/aws.elb.httpcode_elb_5xx_count, 5m) > 50'
              name: 'High 5XX Error rate on {HOST.NAME}'
              priority: WARNING
        - uuid: ebcf0f48fe96472c9ecdca0ab5e87b77
          name: 'AWS ELB: HTTPCode_ELB_500_Count'
          type: DEPENDENT
          key: aws.elb.httpcode_elb_500_count
          delay: '0'
          history: 7d
          description: |
            The number of HTTP 500 error codes that originate from the load balancer.
            
            https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-cloudwatch-metrics.html
          preprocessing:
            - type: JSONPATH
              parameters:
                - '$.[?(@.Label == "HTTPCode_ELB_500_Count")].Values.first().first()'
          master_item:
            key: aws.elb.get_metrics
          tags:
            - tag: Application
              value: 'AWS ELB'
        - uuid: ebcf0f48fe96472c9ecdca0ab5e87b78
          name: 'AWS ELB: HTTPCode_ELB_502_Count'
          type: DEPENDENT
          key: aws.elb.httpcode_elb_502_count
          delay: '0'
          history: 7d
          description: |
            The number of HTTP 502 error codes that originate from the load balancer.
            
            https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-cloudwatch-metrics.html
          preprocessing:
            - type: JSONPATH
              parameters:
                - '$.[?(@.Label == "HTTPCode_ELB_502_Count")].Values.first().first()'
          master_item:
            key: aws.elb.get_metrics
          tags:
            - tag: Application
              value: 'AWS ELB'
        - uuid: ebcf0f48fe96472c9ecdca0ab5e87b79
          name: 'AWS ELB: HTTPCode_ELB_503_Count'
          type: DEPENDENT
          key: aws.elb.httpcode_elb_503_count
          delay: '0'
          history: 7d
          description: |
            The number of HTTP 503 error codes that originate from the load balancer.
            
            https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-cloudwatch-metrics.html
          preprocessing:
            - type: JSONPATH
              parameters:
                - '$.[?(@.Label == "HTTPCode_ELB_503_Count")].Values.first().first()'
          master_item:
            key: aws.elb.get_metrics
          tags:
            - tag: Application
              value: 'AWS ELB'
        - uuid: ebcf0f48fe96472c9ecdca0ab5e87b80
          name: 'AWS ELB: HTTPCode_ELB_504_Count'
          type: DEPENDENT
          key: aws.elb.httpcode_elb_504_count
          delay: '0'
          history: 7d
          description: |
            The number of HTTP 504 error codes that originate from the load balancer.
            
            https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-cloudwatch-metrics.html
          preprocessing:
            - type: JSONPATH
              parameters:
                - '$.[?(@.Label == "HTTPCode_ELB_504_Count")].Values.first().first()'
          master_item:
            key: aws.elb.get_metrics
          tags:
            - tag: Application
              value: 'AWS ELB'
        - uuid: ebcf0f48fe96472c9ecdca0ab5e87b71
          name: 'AWS ELB: HTTP_Fixed_Response_Count'
          type: DEPENDENT
          key: aws.elb.http_fixed_response_count
          delay: '0'
          history: 7d
          description: |
            The number of fixed-response actions that were successful.
            
            https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-cloudwatch-metrics.html
          preprocessing:
            - type: JSONPATH
              parameters:
                - '$.[?(@.Label == "HTTP_Fixed_Response_Count")].Values.first().first()'
          master_item:
            key: aws.elb.get_metrics
          tags:
            - tag: Application
              value: 'AWS ELB'
        - uuid: ebcf0f48fe96472c9ecdca0ab5e87b72
          name: 'AWS ELB: HTTP_Redirect_Count'
          type: DEPENDENT
          key: aws.elb.http_redirect_count
          delay: '0'
          history: 7d
          description: |
            The number of redirect actions that were successful.
            
            https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-cloudwatch-metrics.html
          preprocessing:
            - type: JSONPATH
              parameters:
                - '$.[?(@.Label == "HTTP_Redirect_Count")].Values.first().first()'
          master_item:
            key: aws.elb.get_metrics
          tags:
            - tag: Application
              value: 'AWS ELB'
        - uuid: ebcf0f48fe96472c9ecdca0ab5e87b73
          name: 'AWS ELB: HTTP_Redirect_Url_Limit_Exceeded_Count'
          type: DEPENDENT
          key: aws.elb.http_redirect_url_limit_exceeded_count
          delay: '0'
          history: 7d
          description: |
            The number of redirect actions that couldn't be completed because the URL in the response location header is larger than 8K.
            
            https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-cloudwatch-metrics.html
          preprocessing:
            - type: JSONPATH
              parameters:
                - '$.[?(@.Label == "HTTP_Redirect_Url_Limit_Exceeded_Count")].Values.first().first()'
          master_item:
            key: aws.elb.get_metrics
          tags:
            - tag: Application
              value: 'AWS ELB'
        - uuid: ebcf0f48fe96472c9ecdca0ab5e87b81
          name: 'AWS ELB: IPv6ProcessedBytes'
          type: DEPENDENT
          key: aws.elb.ipv6processedbytes
          delay: '0'
          history: 7d
          value_type: FLOAT
          units: B
          description: |
            The total number of bytes processed by the load balancer over IPv6. This count is included in ProcessedBytes.
            
            https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-cloudwatch-metrics.html
          preprocessing:
            - type: JSONPATH
              parameters:
                - '$.[?(@.Label == "IPv6ProcessedBytes")].Values.first().first()'
          master_item:
            key: aws.elb.get_metrics
          tags:
            - tag: Application
              value: 'AWS ELB'
        - uuid: ebcf0f48fe96472c9ecdca0ab5e87b82
          name: 'AWS ELB: IPv6RequestCount'
          type: DEPENDENT
          key: aws.elb.ipv6requestcount
          delay: '0'
          history: 7d
          description: |
            The number of IPv6 requests received by the load balancer.
            
            https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-cloudwatch-metrics.html
          preprocessing:
            - type: JSONPATH
              parameters:
                - '$.[?(@.Label == "IPv6RequestCount")].Values.first().first()'
          master_item:
            key: aws.elb.get_metrics
          tags:
            - tag: Application
              value: 'AWS ELB'
        - uuid: ebcf0f48fe96472c9ecdca0ab5e87b83
          name: 'AWS ELB: NewConnectionCount'
          type: DEPENDENT
          key: aws.elb.newconnectioncount
          delay: '0'
          history: 7d
          description: |
            The total number of new TCP connections established from clients to the load balancer and from the load balancer to targets.
            
            https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-cloudwatch-metrics.html
          preprocessing:
            - type: JSONPATH
              parameters:
                - '$.[?(@.Label == "NewConnectionCount")].Values.first().first()'
          master_item:
            key: aws.elb.get_metrics
          tags:
            - tag: Application
              value: 'AWS ELB'
        - uuid: ebcf0f48fe96472c9ecdca0ab5e87b84
          name: 'AWS ELB: NonStickyRequestCount'
          type: DEPENDENT
          key: aws.elb.nonstickyrequestcount
          delay: '0'
          history: 7d
          description: |
            The number of requests where the load balancer chose a new target because it couldn't use an existing sticky session. For example, the request was the first request from a new client and no stickiness cookie was presented, a stickiness cookie was presented but it did not specify a target that was registered with this target group, the stickiness cookie was malformed or expired, or an internal error prevented the load balancer from reading the stickiness cookie.
            
            https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-cloudwatch-metrics.html
          preprocessing:
            - type: JSONPATH
              parameters:
                - '$.[?(@.Label == "NonStickyRequestCount")].Values.first().first()'
          master_item:
            key: aws.elb.get_metrics
          tags:
            - tag: Application
              value: 'AWS ELB'
        - uuid: ebcf0f48fe96472c9ecdca0ab5e87b85
          name: 'AWS ELB: ProcessedBytes'
          type: DEPENDENT
          key: aws.elb.processedbytes
          delay: '0'
          history: 7d
          value_type: FLOAT
          units: B
          description: |
            The total number of bytes processed by the load balancer over IPv4 and IPv6 (HTTP header and HTTP payload). This count includes traffic to and from clients and Lambda functions, and traffic from an Identity Provider (IdP) if user authentication is enabled.
            
            https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-cloudwatch-metrics.html
          preprocessing:
            - type: JSONPATH
              parameters:
                - '$.[?(@.Label == "ProcessedBytes")].Values.first().first()'
          master_item:
            key: aws.elb.get_metrics
          tags:
            - tag: Application
              value: 'AWS ELB'
        - uuid: ebcf0f48fe96472c9ecdca0ab5e87b86
          name: 'AWS ELB: RejectedConnectionCount'
          type: DEPENDENT
          key: aws.elb.rejectedconnectioncount
          delay: '0'
          history: 7d
          description: |
            The number of connections that were rejected because the load balancer had reached its maximum number of connections.
            
            https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-cloudwatch-metrics.html
          preprocessing:
            - type: JSONPATH
              parameters:
                - '$.[?(@.Label == "RejectedConnectionCount")].Values.first().first()'
          master_item:
            key: aws.elb.get_metrics
          tags:
            - tag: Application
              value: 'AWS ELB'
          triggers:
            - uuid: aca10ca5489a4c8892e98726bdb5591f
              expression: 'sum(/AWS ELB by HTTP/aws.elb.rejectedconnectioncount, 5m) > 50'
              name: 'Too many Rejected Connections on {HOST.NAME}'
              priority: WARNING
        - uuid: ebcf0f48fe96472c9ecdca0ab5e87b87
          name: 'AWS ELB: RequestCount'
          type: DEPENDENT
          key: aws.elb.requestcount
          delay: '0'
          history: 7d
          description: |
            The number of requests processed over IPv4 and IPv6. This metric is only incremented for requests where the load balancer node was able to choose a target. Requests that are rejected before a target is chosen are not reflected in this metric.
            
            https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-cloudwatch-metrics.html
          preprocessing:
            - type: JSONPATH
              parameters:
                - '$.[?(@.Label == "RequestCount")].Values.first().first()'
          master_item:
            key: aws.elb.get_metrics
          tags:
            - tag: Application
              value: 'AWS ELB'
        - uuid: ebcf0f48fe96472c9ecdca0ab5e87b88
          name: 'AWS ELB: RuleEvaluations'
          type: DEPENDENT
          key: aws.elb.ruleevaluations
          delay: '0'
          history: 7d
          description: |
            The number of rules processed by the load balancer given a request rate averaged over an hour.
            
            https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-cloudwatch-metrics.html
          preprocessing:
            - type: JSONPATH
              parameters:
                - '$.[?(@.Label == "RuleEvaluations")].Values.first().first()'
          master_item:
            key: aws.elb.get_metrics
          tags:
            - tag: Application
              value: 'AWS ELB'
      tags:
        - tag: class
          value: software
        - tag: target
          value: aws
        - tag: target
          value: loadbalancer
      macros:
        - macro: '{$AWS.ACCESS.KEY.ID}'
          description: 'Access key ID.'
        - macro: '{$AWS.AUTH_TYPE}'
          value: role_base
          description: 'Authorization method. Possible values: role_base, access_key.'
        - macro: '{$AWS.ELB.INSTANCE.ID}'
          description: 'app/{load_balancer_name}/{alphanumeric_code} in the ELB ARN.'
        - macro: '{$AWS.REGION}'
          value: ap-northeast-2
          description: 'Amazon ELB Region code.'
        - macro: '{$AWS.SECRET.ACCESS.KEY}'
          type: SECRET_TEXT
          description: 'Secret access key.'
  graphs:
    - uuid: 7a0f738483a847929a34b943a9b0cda7
      name: 'AWS ELB: HTTP 5XX Code'
      graph_items:
        - color: 1A7C11
          calc_fnc: MIN
          item:
            host: 'AWS ELB by HTTP'
            key: aws.elb.httpcode_elb_500_count
        - sortorder: '1'
          color: '274482'
          calc_fnc: MIN
          item:
            host: 'AWS ELB by HTTP'
            key: aws.elb.httpcode_elb_502_count
        - sortorder: '2'
          color: F63100
          calc_fnc: MIN
          item:
            host: 'AWS ELB by HTTP'
            key: aws.elb.httpcode_elb_503_count
        - sortorder: '3'
          color: 37474F
          calc_fnc: MIN
          item:
            host: 'AWS ELB by HTTP'
            key: aws.elb.httpcode_elb_504_count
    - uuid: b24726b653e94985b4b39a3032d6ce63
      name: 'AWS ELB: HTTP XXX Code'
      graph_items:
        - color: E64A19
          calc_fnc: ALL
          item:
            host: 'AWS ELB by HTTP'
            key: aws.elb.httpcode_elb_3xx_count
        - sortorder: '1'
          color: 43A047
          calc_fnc: ALL
          item:
            host: 'AWS ELB by HTTP'
            key: aws.elb.httpcode_elb_4xx_count
        - sortorder: '2'
          color: 8E24AA
          calc_fnc: ALL
          item:
            host: 'AWS ELB by HTTP'
            key: aws.elb.httpcode_elb_5xx_count
